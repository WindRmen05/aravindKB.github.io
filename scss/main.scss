@import './mediaqueries.scss';
@import '../css/normalize.css';

:root {
	--yellow-color: #f9813a;
	--yellow-op-color: #f9803a75;
	// --yellow-color: #f9813a;
	// --yellow-op-color: #f9803a75;
	--grey-color: #202020;
	--white-color:#ffffff;
	--black-color: #313131 ;
	--lite-black: #000000;
	--darkBlue-color: #092e46;
}
// --yellow-color: #d3dbff;
// 	--grey-color: #707070;
// 	--white-color:#3b2e5a;
// 	--black-color: #000000 ;
// 	--lite-black: #221F17;
// 	--darkBlue-color: #010507;

::before,
::after {
  box-sizing: border-box;
}


html {
	font-size: calc(1em + 1vw);
    overflow: scroll;
    overflow-x: hidden;
	cursor: crosshair;
	caret-color: yellow;
	-ms-overflow-style: none;
	overflow-y: scroll;
	scroll-behavior: smooth;
}

body {
  margin: 0;
  padding: 0;
  font-family:  sans-serif;
  scroll-behavior: smooth;
  overflow:hidden;
}



h1,
h2,
h3,
h4,
p {
  margin: 0;
  padding: 0;
}

s {
	color: var(--white-color);
	font-family: 'Montserrat', sans-serif,'Cutive Mono';
}

h1 {
  font-size: 4.5em;
  text-transform: uppercase;
}

h2 {
  font-size: 3em;
}

h3 {
  font-size: 1.6em;
}

h4 {
  font-size: 1.9em;
   color: rgb(194, 194, 194);
}

.col-1 {
	color:var(--white-color);
}

.col-2 {
	color: var(--yellow-color);
}

.col-3 {
	color: var(--yellow-color);
}

.col-1 ,.col-2 ,.col-3 {
	font-family: sans-serif;
	font-weight: 900;
	-webkit-text-stroke-width: 2px;
  	// -webkit-text-stroke-color: var(--yellow-color);
}

.stroke {
	color: var(--black-color);
  -webkit-text-fill-color: white; /* Will override color (regardless of order) */
  -webkit-text-stroke: 1px;
  -webkit-text-stroke-color: var(--black-color);
}

a,
li {
  text-decoration: none;
  list-style-type: none;
  color: var(--white-color);
}

img {
  height: auto;
  display: block;
}

.bgtext {
	// color: var(--black-color);
	font-size: 16em;
	// -webkit-text-stroke-width: 3px;
  	// -webkit-text-stroke-color: var(--yellow-color);
	-webkit-text-fill-color: var(--white-color);
}

.highlite {
	color: var(--yellow-color);
	-webkit-text-fill-color: var(--yellow-color);
}
.highlite1 {
	color: var(--white-color);
	font-weight: 900;
}
.highlite2 {
	// text-decoration: underline 1px rgb(255, 255, 255);
	color: var(--black-color);
	// opacity: .3;
	// -webkit-text-fill-color: difference;
}

.highlite3 {
		-webkit-text-stroke-width: 2px;
		-webkit-text-stroke-color: var(--white-color);
		-webkit-text-fill-color: transparent;

		@include media('<=phone') {
			-webkit-text-stroke-width: 1px;
			-webkit-text-stroke-color: var(--white-color);
			-webkit-text-fill-color: transparent;
		}
		
		@include media('>=phone','<=510px') {
			-webkit-text-stroke-width: 1px;
			-webkit-text-stroke-color: var(--white-color);
			-webkit-text-fill-color: transparent;
		}
}

////line
.line {
		position: relative;
		// margin-left: 90px;
		height: 400px;
		width: 3px;
		background: var(--yellow-color);
	}

////mouseHover styles
.cursor {
	pointer-events: none;
	position: fixed;
	padding: .25rem;
	background: #fff;
	border-radius: 50%;
	mix-blend-mode: difference;
	transition: transform .3s ease;
	opacity: 0;
}

.hover-this:hover ~ .cursor {
	opacity: 1;
	transform: translate(-50%,-50%) scale(8);
}

//animations
@keyframes hover {
	0%{
		transform: translateY(-.2em)
	}
	45%{
		transform: translateY(.2em)
	}
	100%{
		transform: translateY(-.2em)
	}
}

//////////////////////////////////////

.container {

	background-color: var(--grey-color);
	display: grid;
	grid-template-rows: [main-start] repeat(5,100vh ) [main-end faq-start] minmax(min-content,auto) [faq-end footer-start] 100vh [footer-end];
	// grid-template-columns: repeat(4,1fr);

	grid-template-areas:"lan lan lan lan"
						 "txt1 txt1 txt1 txt1"
						 "txt2 txt2 txt2 txt2"
						 "txt3 txt3 txt3 txt3"
						 "txt4 txt4 txt4 txt4"
						 "txt5 txt5 txt5 txt5"
						//  "txt6 txt6 txt6 txt6"
						 "foo foo foo foo";
	transition: 1s;

	& .box {
		opacity:.5;
		fill: var(--yellow-op-color);

		&:hover {
		fill: var(--grey-color);
		transition: .2s;
	}
	}

	@include media('<=phone') {
		grid-template-rows: [main-start] repeat(5,100vh ) [main-end faq-start] minmax(min-content,auto) [faq-end footer-start] 50vh [footer-end];
	}
	@include media('>=phone','<=510px') {
		grid-template-rows: [main-start] repeat(5,100vh ) [main-end faq-start] minmax(min-content,auto) [faq-end footer-start] 60vh [footer-end];
	}
	
}
///////////////////////////////////LANDING PAGE////////////////////////
.landing_page {
	// background-color: var(--black-color);
	grid-area: lan;
	display: flex;
	align-items: center;
	justify-content: start;

	& .main_btn {
		position: absolute;
		bottom: 25vh;
		left: 24vw;
		// mix-blend-mode: screen;
		font-size: .7em;
		z-index: 5;
		background: var(--white-color);
		color: var(--grey-color);
		padding: 10px;
		height:auto;
		transition: .2s ease-out;
		display: flex;
		align-items: center;
		// margin-top: 30px;

		& .arrow-down {
				color: var(--black-color);
			}

		& p {
			width: 200px;
			height: 10px;
			margin-left: 15px;
			
		}
	}

	& #svg {
		opacity: .5;
		position: absolute;
		left: 2vw;
		top: 9vh;
		// margin-top: 6em;
		width: 25em;
		height: auto;
		z-index:3;

		@include media('<=phone') {
			width: 20em;
			top: 30vh;
			left: -32vw;
		}

		@include media('>=phone','<=510px') {
			width: 23em;
			top: 25vh;
			left: -7em;
		}
		
		@include media('>=510px','<=768px') {
			width: 25em;
			top: 25vh;
			left: -5em;
		}
	}

	& .main_content {
		// z-index: 2;
		position: absolute;
		bottom: 35vh;
		left: 24vw;
		display: flex;
		flex-direction: column;
		width: 50%;
		height: auto;
		color: var(--lite-black-color);
		padding:0 0 0 0;

		// & .main_text1 {
		// 	position: relative;
		// 	top: .5em;
		// }

		& .main_text1{
			color: var(--white-color);
			// mix-blend-mode: difference;
			margin-top: -.3em;
			font-size: 2.5em;
			font-weight: 900;

			@include media('<=phone') {
				// margin-top: .0001em;
				font-size: 2em;
				font-weight: 700;
			}

			@include media('>=phone','<=510px') {
				font-size:2.2em;
				font-weight: 900;
			}
		}

		

	& .main_line {
		margin-top: 20px;
		width: 15em;
		height:2px;
		background-color: var(--white-color);

		@include media('<=phone') {
			width: 10em;
		}
		
		@include media('>=phone','<=510px') {
			width: 9em;
		}
	}
	}

	
}

//scroll indicator////////////////////////////
.percent {
	font-size: .5em;
	z-index: 3;
	position: fixed;
	bottom: 3vh;
	right: 2vw;
	// -webkit-text-stroke-width: .01em;
  	// -webkit-text-stroke-color: var(--white-color);
	color: var(--white-color);
	// margin: -10px 0 0 -10px;
	// border-radius: 50%;
}

.wrap {
	width: 0;
	height:0;
	z-index: 9;
	position: fixed;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	// overflow: hidden;
}

.logo{
	margin-left:-30px;
	// transform: rotate(90deg);
	z-index:10;
	grid-area: logo;
	position: fixed;
	top: 4vh;
	left: 2em;
	text-transform: uppercase;
	letter-spacing: .05em;
	word-spacing: -.1em;

	& li {
		font-size: .5em;
		color : var(--black-color);
		transition: all .3s;

		&:hover {
			color:var(--yellow-color);
			transform: skew(-10deg);
			cursor:none;
		}
	}
}

.navbar {
	z-index: 5;
	visibility: hidden;
	position: fixed;
	right: 2vw;
	top: 4vh;
	display: flex;
	flex-direction: column;
	align-items: end;
	gap: .5vh;

	& .nav-bar {
		background:var(--black-color);
		width:1.5em;
		height:.2em;
		
		&:nth-child(2) {
			width:1.3em;
			height:.2em;
		}
		&:nth-child(3) {
			width:.7em;
			height:.2em;
		}
		&:nth-child(4) {
			width:.9em;
			height:.2em;
		}
	}
	
}

.navigation {
	display: flex;
	align-items: end;
	z-index: 10;
	font-size: .5em;
	position: fixed;
	top: 2vh;
	right: 2vw;
	gap: 1em;

	& li {
		text-transform: uppercase;
		letter-spacing: 5px;
		// background: var(--yellow-op-color);

		& a {
			color:var(--black-color);
			transition: all .7s;
			padding: 1em;

			&:hover {
			color: var(--white-color);
		}
			&:active {
			color: var(--grey-color);
		}
		}

		@include media('<=phone') {
			letter-spacing: 3px;
		}
		
	}
	
	@include media('<=phone') {
		flex-direction: column;
		align-items: end;
		right: 3vh;
	}
	
	@include media('<=800px') {
		flex-direction: column;
		// visibility: hidden;
	}
	
	@include media('>=phone','<=510px') {
		flex-direction: column;
		align-items: end;
		right: 3vh;
		font-size: .4em;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////FIRST PAGE////////////////////////////////////////////////////
.first_page {
	opacity: .4;
	// position: fixed;
	// background-color:rgb(44, 44, 44);
	grid-area: txt4;
	color:var(--white-color);
	// border-top:1px solid var(--yellow-color);
	display: flex;
	align-items: center;
	justify-content: center;

	& .d-box {
		z-index: 2;
		position: absolute;
		align-items: center;
		width: 15em;
		height: 15em;
	}

	& .good_at {
		z-index: 1;
		font-size: 7em;
		position: absolute;
		// margin-top: 1em;
		// margin-left: -2.5em;
		// margin-right: 2.5em;
		// transform: rotate(-90deg);
		transition: -webkit-text-fill-color 1s;
		text-align: center;

		&:hover {
			-webkit-text-fill-color: var(--white-color);
			z-index: 2;
		}
	}

	& .abilities {
		// border-top: 1px solid var(--yellow-color);
		color: var(--black-color);
		font-size: .9em;
		text-transform: uppercase;
		// visibility: hidden;
		display: flex;
		flex-direction: column;
		position: relative;
		top: 2em;
		left: 5.5em;
		overflow: hidden;

		@include media('<=phone') {
			font-size: .5em;
		}
		
		@include media('>=phone','<=510px') {
			font-size: .6em;
		}

		// @include media('<=800px') {
		// 	font-size: .8em;
		// }
		
	}
}

.box2 {
	opacity: .7;
	fill:var(--lite-black-color);
}

#svg2 {
	position: fixed;
	left: 25vh;
	top: 7vw;
	width: 10em;
	height: auto;
	// animation: hover 4s infinite ease-in-out;
	opacity:0;

	@include media('<=phone') {
		left: -4em;
		top: 27vh;
		width: 8em;
	}
	
	@include media('>=phone','<=510px') {
		left: -4em;
		top: 27vh;
		width: 8.2em;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////SUB HOME PAGE////////////////////////////////////////////////////
.gap1 {
	// background-color: var(--yellow-color);
	// grid-area: txt5;
	overflow: hidden;
}

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////PROJECTS PAGE////////////////////////////////////////////////////
.projects,.crew,.gap2 {
	display: flex;
	flex-direction: column;
	// align-items: center;
	justify-content:center;
}


.projects {
	// background-color: var(--yellow-op-color);
	grid-area: txt1;

	// & #svg2 {
	// 	position: relative;
	// 	left: 20em;
	// 	width: 10em;
	// 	height: auto;
	// }
}

.proj_text {
	margin-top: 5em;
	// margin-left: 13em;
}

.text {
	display: flex;
	flex-direction: column;
	font-style: 'Montserrat';
	font-size:1.5em;
	color: var(--yellow-op-color);

	@include media('<=phone') {
		font-size:.8em;
	}
	
	@include media('>=phone','<=510px') {
		font-size:1em;
	}
}

.text1 {
	margin-left:34vw;

	@include media('<=phone') {
		margin-left:29vw;
	}
	
	@include media('>=phone','<=510px') {
		margin-left:29vw;
	}
}

.text2 {
	margin-left: 13em;

	@include media('<=phone') {
		margin-left:19vw;
		width: 75vw;
	}
	
	@include media('>=phone','<=510px') {
		margin-left:19vw;
		width: 75vw;
	}
}
.text3 {
	margin-left: 13em;
	// justify-content: center;
	// margin-left: 6em;
	// margin-top: -4em;

	@include media('<=phone') {
		margin-left:19vw;
		justify-content: start;
	}
	
	@include media('>=phone','<=510px') {
		margin-left:19vw;
		justify-content: start;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////THISANDTHAT////////////////////////////////////////////////////
.crew {
	// background-color: red;
	grid-area: txt2;

	& .proj_text2 {
		font-style: 'Montserrat';
		margin-left:1vw;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////THISANDTHAT////////////////////////////////////////////////////
.gap2 {
	// background-color:var(--yellow-op-color);
	grid-area: txt3;

	& .proj_text3 {
		font-style: 'Montserrat';
		// margin-left:1vw;
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////THISANDTHAT////////////////////////////////////////////////////
@keyframes levitate {
	0%{
		transform: scale(1.2)
	}
	45%{
		transform: scale(1)
	}
	100%{
		transform: scale(1.2)
	}
}

.faq {
	z-index: 2;
	// opacity: .2;
	grid-area: txt5;
	// background-color: var(--black-color);
	border-bottom: 1px solid var(--white-color);
	border-top: 1px solid var(--white-color);
	width:100%;
	padding:40px 0 40px 0 ;

	@include media('<=phone') {
		padding:10px 0 10px 0 ;
	}
	
	@include media('>=phone','<=510px') {
		padding:20px 0 20px 0 ;
	}

	.questions {
	display: flex;
	justify-content: center;
		font-family: sans-serif;
		color: var(--white-color);

		& .question_flex{
			display: flex;
			gap: 1em;
			
			& .q {
				border: 1px solid var(--white-color);
				// background: var(--black-color);
				color: var(--grey-color);
				font-size: .3em;
				padding:1em;
				text-transform: uppercase;
				animation: levitate 1.5s infinite ease-in;
				// text-align:center;
				width: min-content;
				height: min-content;
			// margin-right: 30px;
		}

		& h2 {
			font-size: 2em;
			text-transform: uppercase;
			-webkit-text-stroke-width: 2px;
  			-webkit-text-stroke-color: var(--black-color);
			-webkit-text-fill-color: transparent;

			&:hover {
				-webkit-text-fill-color: var(--black-color);
			}

			@include media('<=phone') {
				font-size: 1em;
				-webkit-text-stroke-width: 1.3px;
			}
			
			@include media('>=phone','<=510px') {
				font-size: 1.13em;
				-webkit-text-stroke-width: 1.5px;
			}
		}
		}

		.question_para{
			display: none;
			width: 20em;
			text-transform: capitalize;
			color: var(--white-color);
			font-size: 1.5em;
			letter-spacing: 2px;
			-webkit-text-stroke-width: 1px;
  			-webkit-text-stroke-color: var(--white-color);
			-webkit-text-fill-color: transparent;

			@include media('<=phone') {
				font-size: .8em;
				width: 18em;
			}
			
			@include media('>=phone','<=510px') {
				font-size: .7em;
				width: 20em;
				-webkit-text-stroke-width: 0px;
				  -webkit-text-stroke-color: none;
				  -webkit-text-fill-color: var(--white-color);
				  font-weight: 700;
			}
		}

		@include media('<=phone') {
			justify-content: start;
			padding: 1em;
		}
		
		@include media('>=phone','<=510px') {
			justify-content: start;
			padding: 1em;
		}
	}
}

// .faq:hover {
// 	opacity: 1;
// }

//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////FOOTER////////////////////////////////////////////////////
@keyframes boxAnim {
	from{
		background: transparent;
	}
	to{
		background: var(--yellow-color);
	}
}

.footer {
	// background-color:var(--yellow-color);
	grid-area: foo;
	display: flex;
	flex-direction: column;
	// align-items: center;
	// justify-content: center;

	& .soci_text {
		color: var(--white-color);
		opacity: 1;
		width: min-content;
		height: auto;
		font-size: 4em;
		position: relative;
		left: .5em;
		top: 1.2em;
		animation: hover 5s infinite ease-in-out;

		@include media('<=phone') {
			font-size: 2em;
			left: .5em;
			top: 1.6em;
		}
		
		@include media('>=phone','<=510px') {
			font-size: 2.6em;
			left: .5em;
			top: 1.6em;
		}
	}
	
	& .email {z-index:1;
		color: var(--white-color);
		width: min-content;
		padding: 1em;
		border: 1px solid var(--white-color);
		position: relative;
		top:4em;
		left: 7em;
		font-size: 2em;
		text-transform: lowercase;
		transition: color 1s cubic-bezier(0.1, 0.7, 0.6, 0.9); 
		// mix-blend-mode: multiply;

		@include media('<=phone') {
			font-size: .8em;
			top:4em;
			left: 3em;
		}
		
		@include media('>=phone','<=510px') {
			font-size: 1em;
			top:4em;
			left: 2em;
		}

		&::before {
			content: '';
			position: absolute;
			left: 0;
			right: 0;
			bottom: 0;
			top: 0;
			background-color: var(--yellow-color);
			transform: scaleX(0);
			transform-origin: left center;
			transition: transform 500ms cubic-bezier(0.1, 0.7, 0.6, 0.9);
		  }
		

		// &:hover {
		// 	// animation: boxAnim .2s ease-in;
		// 	animation-fill-mode: forwards;
		// 	cursor: pointer;
		// }

		&:hover {
			-webkit-text-stroke-width: 2px;
			-webkit-text-stroke-color: var(--white-color);
			-webkit-text-fill-color: transparent;

			&::before {
			  transform: scaleX(1);
			  mix-blend-mode: lighten;
			}
		  }
	}

	& .details {
		// font-family:  sans-serif;
		display: flex;
		position: relative;
		left:40vw;
		margin-bottom: .5em;
		color: var(--black-color);
		font-weight: 500;

		@include media('<=phone') {
			font-size: .6em;
			left: 45vw;
		}
		
		@include media('>=phone','<=510px') {
			font-size: .55em;
			left:55vw;
		}

		& .insta, .github, .whatsapp {
			font-size: 3em;
			color: var(--lite-black);
			transition: all .9s;
			width: 10%;

			&:hover {
				cursor: pointer;
			}
		}

		& .insta:hover {
			color: rgb(141, 0, 59);
		}
		& .github:hover {
			color: rgb(255, 255, 255);
		}
		& .whatsapp:hover {
			color: rgb(0, 138, 46);
		}

	& ion-icon {
		position:relative;
		font-size: 1em;
		// color:var(--grey-color);
	}
	}

	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @author Eduardo Boucas
/// @access public
////


///
/// Creates a list of global breakpoints
///
/// @example scss - Creates a single breakpoint with the label `phone`
///  $breakpoints: ('phone': 320px);
///
$breakpoints: (
  'phone': 320px,
  'tablet': 768px,
  'desktop': 1024px
) !default;


///
/// Creates a list of static expressions or media types
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
///  );
///
$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;


///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media('>128px') {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media('>20em') {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media('>2.0rem') {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0
) !default;

///
/// Defines whether support for media queries is available, useful for creating separate stylesheets
/// for browsers that don't support media queries.
///
/// @example scss - Disables support for media queries
///  $im-media-support: false;
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
$im-media-support: true !default;

///
/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
/// intercept the breakpoint will be displayed, any others will be ignored.
///
/// @example scss - This media query will show because it intercepts the static breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'tablet';
///  @include media('>=desktop') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-breakpoint: 'desktop' !default;

///
/// Selects which media expressions are allowed in an expression for it to be used when media queries
/// are not supported.
///
/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'screen') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///   /* Generates: */
///   .foo {
///     color: tomato;
///   }
///
/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'retina2x') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

////
/// Cross-engine logging engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Log a message either with `@error` if supported
/// else with `@warn`, using `feature-exists('at-error')`
/// to detect support.
///
/// @param {String} $message - Message to log
///
@function im-log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}


///
/// Wrapper mixin for the log function so it can be used with a more friendly
/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function
/// within functions because it is not possible to include a mixin in a function
/// and use the mixin everywhere else because it's much more elegant.
///
/// @param {String} $message - Message to log
///
@mixin log($message) {
  @if im-log($message) {}
}


///
/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}
  }

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
          ($prefix == 'min' and $value > $no-media-breakpoint-value) {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

////
/// Parsing engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
///
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if im-log(..) {}` instead.
  $_: im-log('No operator found in `#{$expression}`.');
}


///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}


///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');
}


///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value
///
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if im-log(..) {}` instead.
    $_: im-log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}


///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: im-log('Value for `to-number` should be a number or a string.');
  }

  $first-character: str-slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($first-character == '-');
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  // Remove +/- sign if present at first character
  @if ($first-character == '+' or $first-character == '-') {
    $value: str-slice($value, 2);
  }

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: im-log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

///
/// This mixin aims at redefining the configuration just for the scope of
/// the call. It is helpful when having a component needing an extended
/// configuration such as custom breakpoints (referred to as tweakpoints)
/// for instance.
///
/// @author Hugo Giraudel
///
/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
///
/// @example scss - Extend the global breakpoints with a tweakpoint
///  @include media-context(('custom': 678px)) {
///    .foo {
///      @include media('>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend the global media expressions with a custom one
///  @include media-context($tweak-media-expressions: ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend both configuration maps
///  @include media-context(('custom': 678px), ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////


///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { }
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { }
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { }
///
/// @example scss - With a static expression
///  @include media('retina2x') { }
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { }
///
@mixin media($conditions...) {
  @if ($im-media-support and length($conditions) == 0) or
      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}